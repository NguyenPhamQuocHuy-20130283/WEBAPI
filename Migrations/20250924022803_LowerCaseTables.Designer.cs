// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(UserDBContext))]
    [Migration("20250924022803_LowerCaseTables")]
    partial class LowerCaseTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("AdminID");

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("API.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("orderitem", (string)null);
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Đồng hồ điện tử huyền thoại",
                            Gender = "Unisex",
                            Name = "Casio F91W",
                            Price = 250000m,
                            ProductImageUrl = "/images/products/casio1.jpg",
                            Title = "Casio Classic",
                            Url = "casio-f91w"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thiết kế cổ điển sang trọng",
                            Gender = "Unisex",
                            Name = "Casio A168WA",
                            Price = 450000m,
                            ProductImageUrl = "/images/products/casio2.jpg",
                            Title = "Casio Vintage",
                            Url = "casio-a168wa"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Automatic, dây vải",
                            Gender = "Men",
                            Name = "Seiko 5 SNK809",
                            Price = 2200000m,
                            ProductImageUrl = "/images/products/seiko1.jpg",
                            Title = "Seiko Automatic",
                            Url = "seiko-snk809"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dòng lặn nổi tiếng",
                            Gender = "Men",
                            Name = "Seiko SKX007",
                            Price = 5500000m,
                            ProductImageUrl = "/images/products/seiko2.jpg",
                            Title = "Seiko Diver",
                            Url = "seiko-skx007"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dresswatch thanh lịch",
                            Gender = "Men",
                            Name = "Orient FAC00009N0",
                            Price = 3200000m,
                            ProductImageUrl = "/images/products/orient1.jpg",
                            Title = "Orient Bambino",
                            Url = "orient-bambino"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Diver giá rẻ",
                            Gender = "Men",
                            Name = "Orient FAA02009D9",
                            Price = 3800000m,
                            ProductImageUrl = "/images/products/orient2.jpg",
                            Title = "Orient Mako II",
                            Url = "orient-mako2"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Năng lượng ánh sáng",
                            Gender = "Men",
                            Name = "Citizen BM8180",
                            Price = 2900000m,
                            ProductImageUrl = "/images/products/citizen1.jpg",
                            Title = "Citizen Eco-Drive",
                            Url = "citizen-bm8180"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Chronograph thể thao",
                            Gender = "Men",
                            Name = "Citizen AN8190",
                            Price = 3500000m,
                            ProductImageUrl = "/images/products/citizen2.jpg",
                            Title = "Citizen Chronograph",
                            Url = "citizen-an8190"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Huyền thoại xa xỉ",
                            Gender = "Men",
                            Name = "Rolex 116610LN",
                            Price = 220000000m,
                            ProductImageUrl = "/images/products/rolex1.jpg",
                            Title = "Rolex Submariner",
                            Url = "rolex-submariner"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Đẳng cấp doanh nhân",
                            Gender = "Men",
                            Name = "Rolex 126334",
                            Price = 180000000m,
                            ProductImageUrl = "/images/products/rolex2.jpg",
                            Title = "Rolex Datejust",
                            Url = "rolex-datejust"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Đồng hồ Mặt Trăng",
                            Gender = "Men",
                            Name = "Omega Moonwatch",
                            Price = 150000000m,
                            ProductImageUrl = "/images/products/omega1.jpg",
                            Title = "Omega Speedmaster",
                            Url = "omega-speedmaster"
                        },
                        new
                        {
                            Id = 12,
                            Description = "James Bond watch",
                            Gender = "Men",
                            Name = "Omega Diver 300M",
                            Price = 120000000m,
                            ProductImageUrl = "/images/products/omega2.jpg",
                            Title = "Omega Seamaster",
                            Url = "omega-seamaster"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Automatic 80 giờ trữ cót",
                            Gender = "Men",
                            Name = "Tissot Powermatic 80",
                            Price = 18000000m,
                            ProductImageUrl = "/images/products/tissot1.jpg",
                            Title = "Tissot Gentleman",
                            Url = "tissot-gentleman"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Thiết kế retro",
                            Gender = "Unisex",
                            Name = "Tissot PRX Quartz",
                            Price = 9000000m,
                            ProductImageUrl = "/images/products/tissot2.jpg",
                            Title = "Tissot PRX",
                            Url = "tissot-prx"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Thời trang tối giản",
                            Gender = "Women",
                            Name = "DW Classic Petite",
                            Price = 2800000m,
                            ProductImageUrl = "/images/products/dw1.jpg",
                            Title = "Daniel Wellington",
                            Url = "dw-petite"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Phong cách hiện đại",
                            Gender = "Unisex",
                            Name = "DW Classic Black",
                            Price = 3000000m,
                            ProductImageUrl = "/images/products/dw2.jpg",
                            Title = "Daniel Wellington",
                            Url = "dw-black"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Thiết kế mạnh mẽ",
                            Gender = "Men",
                            Name = "Fossil FS4656",
                            Price = 3500000m,
                            ProductImageUrl = "/images/products/fossil1.jpg",
                            Title = "Fossil Chronograph",
                            Url = "fossil-fs4656"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Phong cách thanh lịch",
                            Gender = "Men",
                            Name = "Fossil FS5304",
                            Price = 3200000m,
                            ProductImageUrl = "/images/products/fossil2.jpg",
                            Title = "Fossil Minimalist",
                            Url = "fossil-fs5304"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Diver Swiss Made",
                            Gender = "Men",
                            Name = "Longines L37814566",
                            Price = 42000000m,
                            ProductImageUrl = "/images/products/longines1.jpg",
                            Title = "Longines HydroConquest",
                            Url = "longines-hydro"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Dresswatch cổ điển",
                            Gender = "Men",
                            Name = "Longines L26284783",
                            Price = 58000000m,
                            ProductImageUrl = "/images/products/longines2.jpg",
                            Title = "Longines Master",
                            Url = "longines-master"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Đồng hồ quân đội",
                            Gender = "Men",
                            Name = "Hamilton H70455533",
                            Price = 15000000m,
                            ProductImageUrl = "/images/products/hamilton1.jpg",
                            Title = "Hamilton Khaki Field",
                            Url = "hamilton-khaki"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Thanh lịch, sang trọng",
                            Gender = "Men",
                            Name = "Hamilton H32515555",
                            Price = 19000000m,
                            ProductImageUrl = "/images/products/hamilton2.jpg",
                            Title = "Hamilton Jazzmaster",
                            Url = "hamilton-jazz"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Chronograph Thụy Sĩ",
                            Gender = "Men",
                            Name = "Carrera Calibre 16",
                            Price = 95000000m,
                            ProductImageUrl = "/images/products/tag1.jpg",
                            Title = "Tag Heuer Carrera",
                            Url = "tag-carrera"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Thể thao chuyên nghiệp",
                            Gender = "Men",
                            Name = "Aquaracer 300M",
                            Price = 85000000m,
                            ProductImageUrl = "/images/products/tag2.jpg",
                            Title = "Tag Heuer Aquaracer",
                            Url = "tag-aquaracer"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Giá rẻ, nhiều màu",
                            Gender = "Unisex",
                            Name = "Swatch GN718",
                            Price = 1500000m,
                            ProductImageUrl = "/images/products/swatch1.jpg",
                            Title = "Swatch Originals",
                            Url = "swatch-gn718"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Thiết kế trẻ trung",
                            Gender = "Unisex",
                            Name = "Swatch SO27B100",
                            Price = 1800000m,
                            ProductImageUrl = "/images/products/swatch2.jpg",
                            Title = "Swatch Big Bold",
                            Url = "swatch-bigbold"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Smartwatch giá rẻ",
                            Gender = "Unisex",
                            Name = "Apple Watch SE 44mm",
                            Price = 7500000m,
                            ProductImageUrl = "/images/products/apple1.jpg",
                            Title = "Apple Watch SE",
                            Url = "apple-watch-se"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Siêu bền, cao cấp",
                            Gender = "Unisex",
                            Name = "Apple Watch Ultra 2",
                            Price = 22000000m,
                            ProductImageUrl = "/images/products/apple2.jpg",
                            Title = "Apple Watch Ultra",
                            Url = "apple-watch-ultra"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Đồng hồ thông minh Android",
                            Gender = "Unisex",
                            Name = "Galaxy Watch 6",
                            Price = 8500000m,
                            ProductImageUrl = "/images/products/samsung1.jpg",
                            Title = "Samsung Galaxy Watch",
                            Url = "galaxy-watch6"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Đồng hồ chạy bộ chuyên dụng",
                            Gender = "Unisex",
                            Name = "Forerunner 265",
                            Price = 12000000m,
                            ProductImageUrl = "/images/products/garmin1.jpg",
                            Title = "Garmin Forerunner",
                            Url = "garmin-265"
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Role")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "chihtt123@gmail.com",
                            Password = "123",
                            Role = true,
                            UserName = "chi"
                        });
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.HasOne("API.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Models.OrderItem", b =>
                {
                    b.HasOne("API.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
